				product.js
				
class ProductsModel {
  async getProducts() {
    try {
      let result = await fetch('products.json');
      let data = await result.json();

      let products = data.items;
      products = products.map(item => {
        const { title, author, price, quantity } = item.fields;
        const { id } = item.sys;

        const image = item.fields.image.fields.file.url;
        return { title, author, price, quantity, id, image }
      })
      return products;

    } catch (error) {
      console.log(error);
    }
  }
}

class CartModel {
  constructor() {
    this.cart = [];
  }

  getCart() {
    return this.cart;
  }

  setCart(cart) {
    this.cart = cart;
  }

  addToCart(item) {
    this.cart = [...this.cart, item];
  }

  removeFromCart(id) {
    this.cart = this.cart.filter(item => item.id !== id);
  }
}

class StorageModel {
  static saveProducts(products) {
    localStorage.setItem("products", JSON.stringify(products));
  }

  static getProduct(id) {
    let products = JSON.parse(localStorage.getItem("products"));
    return products.find(product => product.id === id);
  }

  static saveCart(cart) {
    localStorage.setItem('cart', JSON.stringify(cart));
  }

  static getCart() {
    return localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : [];
  }
}



						ui.js
						
						
class ProductsView {
  constructor() {
    this.productsDOM = document.querySelector(".products-center");
  }

  displayProducts(products) {
    let result = '';
    products.forEach(product => {
      result += `
      <article class="product">
        <div class="img-container">
          <img src=${product.image} alt="product" class="product-img">
          <button class="bag-btn" data-id=${product.id}>
            <i class="fas fa-shopping-cart"></i>
            add to cart
          </button>
        </div>
        <h3>${product.title}</h3>
        <h4>Author: ${product.author}</h4>
        <h4>Quantity: <span class="qty" data-id=${product.id}>${product.quantity}</span></h4>
        <h4>Rs.${product.price}</h4> 
        <span id="soldout" class="soldout dis" data-id=${product.id}>Sold Out</span>
      </article>
      `;
    });
    this.productsDOM.innerHTML = result;
  }

  getBagButtons() {
    const buttons = [...document.querySelectorAll(".bag-btn")];
    buttons.forEach(button => {
      let id = button.dataset.id;
      button.addEventListener("click", () => {
        this.addToCart(id);
      });
    });
  }

  addToCart(id) {
    const event = new CustomEvent('addToCart', { detail: id });
    document.dispatchEvent(event);
  }
}

class CartView {
  constructor() {
    this.cartDOM = document.querySelector(".cart");
    this.cartOverlay = document.querySelector(".cart-overlay");
    this.cartItems = document.querySelector(".cart-items");
    this.cartTotal = document.querySelector(".cart-total");
    this.cartContent = document.querySelector(".cart-content");
    this.closeCartBtn = document.querySelector(".close-cart");
    this.clearCartBtn = document.querySelector(".clear-cart");
    this.buttonDOM = [];
  }

    setCartValues(total, items) {
    this.cartTotal.innerText = parseFloat(total.toFixed(2));
    this.cartItems.innerText = items;
  }
}

					control.js
					
class Controller {
  constructor(productsModel, cartModel, productsView, cartView) {
    this.productsModel = productsModel;
    this.cartModel = cartModel;
    this.productsView = productsView;
    this.cartView = cartView;

    this.initialize();
  }

  initialize() {
    this.loadProducts();
    this.bindEvents();
    this.cartView.setupAPP();
  }

  loadProducts() {
    this.productsModel.getProducts()
      .then(products => {
        this.productsModel.setProducts(products);
        this.productsView.displayProducts(products);
        Storage.saveProducts(products);
      })
      .then(() => {
        this.productsView.getBagButtons();
        this.cartView.cartLogic();
      });
  }

  bindEvents() {
    document.addEventListener('addToCart', event => {
      const productId = event.detail;
      const product = Storage.getProduct(productId);
      this.cartModel.addToCart(product);
      Storage.saveCart(this.cartModel.getCart());
      this.cartView.addCartItem(product);
      this.cartView.setCartValues(this.cartModel.getTotalPrice(), this.cartModel.getTotalItems());
      this.cartView.showCart();
    });

    this.cartView.closeCartBtn.addEventListener('click', () => {
      this.cartView.hideCart();
    });

    this.cartView.clearCartBtn.addEventListener('click', () => {
      this.cartModel.clearCart();
      Storage.saveCart(this.cartModel.getCart());
      this.cartView.clearCart();
    });
  }
}

const productsModel = new ProductsModel();
const cartModel = new CartModel();
const productsView = new ProductsView();
const cartView = new CartView();

const controller = new Controller(productsModel, cartModel, productsView, cartView);

